{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.20;\n\nimport {IAccessControl} from \"./IAccessControl.sol\";\nimport {Context} from \"../utils/Context.sol\";\nimport {IERC165, ERC165} from \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address account => bool) hasRole;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 role => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        return _roles[role].hasRole[account];\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n     * is missing `role`.\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n\n        _revokeRole(role, callerConfirmation);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (!hasRole(role, account)) {\n            _roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Attempts to revoke `role` from `account` and returns a boolean indicating if `role` was revoked.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (hasRole(role, account)) {\n            _roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (access/IAccessControl.sol)\n\npragma solidity >=0.8.4;\n\n/**\n * @dev External interface of AccessControl declared to support ERC-165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev The `account` is missing a role.\n     */\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n    /**\n     * @dev The caller of a function is not the expected one.\n     *\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n     */\n    error AccessControlBadConfirmation();\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted to signal this.\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call. This account bears the admin role (for the granted role).\n     * Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/PlebbitTippingV1.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\n\n/**\n * @title PlebbitTippingV1\n * @notice A contract for tipping users with ETH, supporting fee recipients and comment-based tracking.\n * @dev Uses AccessControl for moderator/admin permissions.\n */\ncontract PlebbitTippingV1 is AccessControl {\n    /**\n     * @notice Struct representing a single tip.\n     * @param amount The amount of ETH tipped (uint96 for gas savings).\n     * @param feeRecipient The address receiving the fee portion.\n     * @param sender The address of the tip sender.\n     * @param senderCommentCid Optional comment CID from the sender (0x0 if none).\n     */\n    struct TipData {\n        uint96 amount;\n        address feeRecipient;\n        address sender;\n        bytes32 senderCommentCid;\n    }\n\n    /// @notice Maps (recipientCommentCid, feeRecipient) to an array of tips.\n    mapping(bytes32 => TipData[]) public tips;\n\n    /// @notice Maps (recipientCommentCid, feeRecipient) to the total amount tipped.\n    mapping(bytes32 => uint256) public tipsTotalAmounts;\n\n    /// @notice Maps (senderCommentCid, sender, recipientCommentCid, feeRecipient) to the total amount tipped by sender.\n    mapping(bytes32 => uint256) public senderTipsTotalAmounts;\n\n    /// @notice The minimum allowed tip amount (in wei). Can be changed by a moderator.\n    uint256 public minimumTipAmount;\n\n    /// @notice The fee percentage (between 1 and 20). Can be changed by a moderator.\n    uint256 public feePercent;\n\n    /// @notice Role identifier for moderators.\n    bytes32 public constant MODERATOR_ROLE = keccak256(\"MODERATOR_ROLE\");\n\n    /**\n     * @notice Emitted when a tip is sent.\n     * @param sender The address sending the tip.\n     * @param recipient The address receiving the tip.\n     * @param amount The total amount tipped.\n     * @param feeRecipient The address receiving the fee.\n     * @param recipientCommentCid The comment CID of the recipient.\n     * @param senderCommentCid The comment CID of the sender (0x0 if none).\n     */\n    event Tip(\n        address indexed sender,\n        address indexed recipient,\n        uint256 amount,\n        address indexed feeRecipient,\n        bytes32 recipientCommentCid,\n        bytes32 senderCommentCid\n    );\n\n    /**\n     * @notice Contract constructor.\n     * @param _minimumTipAmount The minimum tip amount (in wei).\n     * @param _feePercent The fee percentage (between 1 and 20).\n     */\n    constructor(uint256 _minimumTipAmount, uint256 _feePercent) {\n        minimumTipAmount = _minimumTipAmount;\n        feePercent = _feePercent;\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    }\n\n    /**\n     * @notice Send a tip to a recipient, with a portion going to a fee recipient.\n     * @dev The tip is tracked by both recipient and sender comment CIDs.\n     * @param recipient The address to receive the tip.\n     * @param amount The total amount to tip (must match msg.value).\n     * @param feeRecipient The address to receive the fee.\n     * @param senderCommentCid Optional comment CID from the sender (0x0 if none).\n     * @param recipientCommentCid The comment CID of the recipient.\n     */\n    function tip(\n        address recipient,\n        uint256 amount,\n        address feeRecipient,\n        bytes32 senderCommentCid,\n        bytes32 recipientCommentCid\n    ) external payable {\n        require(msg.value >= minimumTipAmount, \"Tip amount is too low\");\n        require(msg.value == amount, \"Sent value doesn't match amount\");\n        \n        // Calculate fee and recipient amount\n        uint256 fee = (amount * feePercent) / 100;\n        uint256 receivedAmount = amount - fee;\n\n        // Transfer fee and tip\n        payable(feeRecipient).transfer(fee);\n        payable(recipient).transfer(receivedAmount);\n\n        // Track tip by recipient comment and fee recipient\n        bytes32 tipKey = keccak256(abi.encodePacked(recipientCommentCid, feeRecipient));\n        tips[tipKey].push(TipData(uint96(amount), feeRecipient, msg.sender, senderCommentCid));\n        tipsTotalAmounts[tipKey] += amount;\n\n        // Track total tipped by sender for this combination\n        bytes32 senderTipKey = keccak256(abi.encode(senderCommentCid, msg.sender, recipientCommentCid, feeRecipient));\n        senderTipsTotalAmounts[senderTipKey] += amount;\n\n        emit Tip(msg.sender, recipient, amount, feeRecipient, recipientCommentCid, senderCommentCid);\n    }\n\n    /**\n     * @notice Get the total amount tipped for a recipient comment and a list of fee recipients.\n     * @param recipientCommentCid The comment CID of the recipient.\n     * @param feeRecipients The list of fee recipient addresses.\n     * @return total The total amount tipped for the given parameters.\n     */\n    function getTipsTotalAmount(\n        bytes32 recipientCommentCid,\n        address[] calldata feeRecipients\n    ) external view returns (uint256) {\n        uint256 total = 0;\n        for (uint256 i = 0; i < feeRecipients.length; i++) {\n            bytes32 tipKey = keccak256(abi.encodePacked(recipientCommentCid, feeRecipients[i]));\n            total += tipsTotalAmounts[tipKey];\n        }\n        return total;\n    }\n\n    /**\n     * @notice Get the total amounts tipped for multiple recipient comments and fee recipients.\n     * @param recipientCommentCids Array of recipient comment CIDs.\n     * @param feeRecipients Array of arrays of fee recipient addresses.\n     * @return totals Array of total amounts for each recipient comment.\n     */\n    function getTipsTotalAmounts(\n        bytes32[] calldata recipientCommentCids,\n        address[][] calldata feeRecipients\n    ) external view returns (uint256[] memory) {\n        require(recipientCommentCids.length == feeRecipients.length, \"Arrays length mismatch\");\n        uint256[] memory totals = new uint256[](recipientCommentCids.length);\n        \n        for (uint256 i = 0; i < recipientCommentCids.length; i++) {\n            for (uint256 j = 0; j < feeRecipients[i].length; j++) {\n                bytes32 tipKey = keccak256(abi.encodePacked(recipientCommentCids[i], feeRecipients[i][j]));\n                totals[i] += tipsTotalAmounts[tipKey];\n            }\n        }\n        return totals;\n    }\n\n    /**\n     * @notice Get the total amounts tipped for multiple recipient comments, using the same fee recipients for each.\n     * @param recipientCommentCids Array of recipient comment CIDs.\n     * @param feeRecipients Array of fee recipient addresses.\n     * @return totals Array of total amounts for each recipient comment.\n     */\n    function getTipsTotalAmountsSameFeeRecipients(\n        bytes32[] calldata recipientCommentCids,\n        address[] calldata feeRecipients\n    ) external view returns (uint256[] memory) {\n        uint256[] memory totals = new uint256[](recipientCommentCids.length);\n        \n        for (uint256 i = 0; i < recipientCommentCids.length; i++) {\n            for (uint256 j = 0; j < feeRecipients.length; j++) {\n                bytes32 tipKey = keccak256(abi.encodePacked(recipientCommentCids[i], feeRecipients[j]));\n                totals[i] += tipsTotalAmounts[tipKey];\n            }\n        }\n        return totals;\n    }\n\n    /**\n     * @notice Get the amounts of individual tips for a recipient comment and fee recipients, with pagination.\n     * @param recipientCommentCid The comment CID of the recipient.\n     * @param feeRecipients The list of fee recipient addresses.\n     * @param offset The starting index for pagination.\n     * @param limit The maximum number of results to return.\n     * @return amounts Array of tip amounts.\n     */\n    function getTipsAmounts(\n        bytes32 recipientCommentCid,\n        address[] calldata feeRecipients,\n        uint256 offset,\n        uint256 limit\n    ) external view returns (uint256[] memory amounts) {\n        uint256 totalTips = 0;\n        \n        // Count total tips across all feeRecipients\n        for (uint256 i = 0; i < feeRecipients.length; i++) {\n            bytes32 tipKey = keccak256(abi.encodePacked(recipientCommentCid, feeRecipients[i]));\n            totalTips += tips[tipKey].length;\n        }\n        \n        if (offset >= totalTips) {\n            return new uint256[](0);\n        }\n        \n        uint256 maxResults = limit;\n        if (offset + limit > totalTips) {\n            maxResults = totalTips - offset;\n        }\n        \n        amounts = new uint256[](maxResults);\n        uint256 currentIndex = 0;\n        uint256 resultIndex = 0;\n        \n        for (uint256 i = 0; i < feeRecipients.length && resultIndex < maxResults; i++) {\n            bytes32 tipKey = keccak256(abi.encodePacked(recipientCommentCid, feeRecipients[i]));\n            TipData[] storage tipArray = tips[tipKey];\n            \n            for (uint256 j = 0; j < tipArray.length && resultIndex < maxResults; j++) {\n                if (currentIndex >= offset) {\n                    amounts[resultIndex] = tipArray[j].amount;\n                    resultIndex++;\n                }\n                currentIndex++;\n            }\n        }\n        \n        return amounts;\n    }\n\n    /**\n     * @notice Get the TipData structs for a recipient comment and fee recipients, with pagination.\n     * @param recipientCommentCid The comment CID of the recipient.\n     * @param feeRecipients The list of fee recipient addresses.\n     * @param offset The starting index for pagination.\n     * @param limit The maximum number of results to return.\n     * @return result Array of TipData structs.\n     */\n    function getTips(\n        bytes32 recipientCommentCid,\n        address[] calldata feeRecipients,\n        uint256 offset,\n        uint256 limit\n    ) external view returns (TipData[] memory) {\n        uint256 totalTips = 0;\n        \n        // Count total tips across all feeRecipients\n        for (uint256 i = 0; i < feeRecipients.length; i++) {\n            bytes32 tipKey = keccak256(abi.encodePacked(recipientCommentCid, feeRecipients[i]));\n            totalTips += tips[tipKey].length;\n        }\n        \n        if (offset >= totalTips) {\n            return new TipData[](0);\n        }\n        \n        uint256 maxResults = limit;\n        if (offset + limit > totalTips) {\n            maxResults = totalTips - offset;\n        }\n        \n        TipData[] memory result = new TipData[](maxResults);\n        uint256 currentIndex = 0;\n        uint256 resultIndex = 0;\n        \n        for (uint256 i = 0; i < feeRecipients.length && resultIndex < maxResults; i++) {\n            bytes32 tipKey = keccak256(abi.encodePacked(recipientCommentCid, feeRecipients[i]));\n            TipData[] storage tipArray = tips[tipKey];\n            \n            for (uint256 j = 0; j < tipArray.length && resultIndex < maxResults; j++) {\n                if (currentIndex >= offset) {\n                    result[resultIndex] = tipArray[j];\n                    resultIndex++;\n                }\n                currentIndex++;\n            }\n        }\n        \n        return result;\n    }\n\n    /**\n     * @notice Get the total amount tipped by a sender for a given sender comment, recipient comment, and fee recipients.\n     * @param senderCommentCid The comment CID from the sender (0x0 if none).\n     * @param sender The address of the tip sender.\n     * @param recipientCommentCid The comment CID of the recipient.\n     * @param feeRecipients The list of fee recipient addresses.\n     * @return total The total amount tipped by the sender for these parameters.\n     */\n    function getSenderTipsTotalAmount(\n        bytes32 senderCommentCid,\n        address sender,\n        bytes32 recipientCommentCid,\n        address[] calldata feeRecipients\n    ) external view returns (uint256) {\n        uint256 total = 0;\n        for (uint256 i = 0; i < feeRecipients.length; i++) {\n            // Generate a unique key for this combination of sender, comments, and fee recipient\n            bytes32 senderTipKey = keccak256(abi.encode(senderCommentCid, sender, recipientCommentCid, feeRecipients[i]));\n            total += senderTipsTotalAmounts[senderTipKey];\n        }\n        return total;\n    }\n\n    /**\n     * @notice Get the total amounts tipped by a sender for multiple recipient comments and fee recipients.\n     * @param senderCommentCid The comment CID from the sender (0x0 if none).\n     * @param sender The address of the tip sender.\n     * @param recipientCommentCids Array of recipient comment CIDs.\n     * @param feeRecipients Array of arrays of fee recipient addresses.\n     * @return totals Array of total amounts for each recipient comment.\n     */\n    function getSenderTipsTotalAmounts(\n        bytes32 senderCommentCid,\n        address sender,\n        bytes32[] calldata recipientCommentCids,\n        address[][] calldata feeRecipients\n    ) external view returns (uint256[] memory) {\n        require(recipientCommentCids.length == feeRecipients.length, \"Arrays length mismatch\");\n        uint256[] memory totals = new uint256[](recipientCommentCids.length);\n        \n        for (uint256 i = 0; i < recipientCommentCids.length; i++) {\n            for (uint256 j = 0; j < feeRecipients[i].length; j++) {\n                bytes32 senderTipKey = keccak256(abi.encode(senderCommentCid, sender, recipientCommentCids[i], feeRecipients[i][j]));\n                totals[i] += senderTipsTotalAmounts[senderTipKey];\n            }\n        }\n        return totals;\n    }\n\n    /**\n     * @notice Get the total amounts tipped by a sender for multiple recipient comments, using the same fee recipients for each.\n     * @param senderCommentCid The comment CID from the sender (0x0 if none).\n     * @param sender The address of the tip sender.\n     * @param recipientCommentCids Array of recipient comment CIDs.\n     * @param feeRecipients Array of fee recipient addresses.\n     * @return totals Array of total amounts for each recipient comment.\n     */\n    function getSenderTipsTotalAmountsSameFeeRecipients(\n        bytes32 senderCommentCid,\n        address sender,\n        bytes32[] calldata recipientCommentCids,\n        address[] calldata feeRecipients\n    ) external view returns (uint256[] memory) {\n        uint256[] memory totals = new uint256[](recipientCommentCids.length);\n        \n        for (uint256 i = 0; i < recipientCommentCids.length; i++) {\n            for (uint256 j = 0; j < feeRecipients.length; j++) {\n                bytes32 senderTipKey = keccak256(abi.encode(senderCommentCid, sender, recipientCommentCids[i], feeRecipients[j]));\n                totals[i] += senderTipsTotalAmounts[senderTipKey];\n            }\n        }\n        return totals;\n    }\n\n    // Admin functions\n\n    /**\n     * @notice Set the minimum allowed tip amount.\n     * @dev Only callable by accounts with MODERATOR_ROLE.\n     * @param _minimumTipAmount The new minimum tip amount (in wei).\n     */\n    function setMinimumTipAmount(uint256 _minimumTipAmount) external onlyRole(MODERATOR_ROLE) {\n        minimumTipAmount = _minimumTipAmount;\n    }\n\n    /**\n     * @notice Set the fee percentage.\n     * @dev Only callable by accounts with MODERATOR_ROLE. Must be between 1 and 20.\n     * @param _feePercent The new fee percentage.\n     */\n    function setFeePercent(uint256 _feePercent) external onlyRole(MODERATOR_ROLE) {\n        require(_feePercent >= 1 && _feePercent <= 20, \"Fee percent must be between 1 and 20\");\n        feePercent = _feePercent;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}